# Language this format style is targeted at.
Language: Cpp

# Disables formatting at all.
#DisableFormat: false

# The extra indent or outdent of access modifiers, e.g. public:.
AccessModifierOffset: -4

# Horizontally aligns arguments after an open bracket.
AlignAfterOpenBracket: Align

# Aligns escaped newlines as far left as possible. Otherwise puts them into the right-most column.
AlignEscapedNewlines: Left

# If true, horizontally align operands of binary and ternary expressions.
AlignOperands: true

#If true, aligns trailing comments.
AlignTrailingComments: true

# If the function declaration doesn’t fit on a line, allow putting all parameters of a function declaration onto the next line even if BinPackParameters is false.
AllowAllParametersOfDeclarationOnNextLine: true

# Dependent on the value, while (true) { continue; } can be put on a single line.
AllowShortBlocksOnASingleLine: Never

# If true, short case labels will be contracted to a single line.
AllowShortCaseLabelsOnASingleLine: false

# Dependent on the value, int f() { return 0; } can be put on a single line.
AllowShortFunctionsOnASingleLine: None

# Dependent on the value, if (a) return; can be put on a single line.
AllowShortIfStatementsOnASingleLine: Never

# Dependent on the value, auto lambda []() { return 0; } can be put on a single line.
AllowShortLambdasOnASingleLine: Inline

# If true, while (true) continue; can be put on a single line.
AllowShortLoopsOnASingleLine: false

# If true, always break before multiline string literals.
AlwaysBreakBeforeMultilineStrings: false

# The template declaration breaking style to use.
AlwaysBreakTemplateDeclarations: Yes

# If false, a function declaration’s or function definition’s parameters will either all be on the same line or will have one line each.
BinPackParameters: false

#The way to wrap binary operators.
BreakBeforeBinaryOperators: All

# The brace breaking style to use.
BreakBeforeBraces: Attach

# If true, ternary operators will be placed after line breaks.
BreakBeforeTernaryOperators: true

# The constructor initializers style to use.
BreakConstructorInitializers: BeforeColon

# The inheritance list style to use.
BreakInheritanceList: AfterComma

# The column limit.
# A column limit of 0 means that there is no column limit. In this case, clang-format will respect the input’s line breaking decisions within statements unless they contradict other rules.
ColumnLimit: 0 # 100

# A regular expression that describes comments with special meaning, which should not be split into lines or otherwise changed.
# CommentPragmas (std::string)

# If the constructor initializers don’t fit on a line, put each initializer on its own line.
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# The number of characters to use for indentation of constructor initializer lists.
ConstructorInitializerIndentWidth: 4

# Indent width for line continuations.
ContinuationIndentWidth: 4

# If true, format braced lists as best suited for C++11 braced lists.
# Important differences: - No spaces inside the braced list. - No line break before the closing brace. - Indentation with the continuation indent, not with the block indent.
# Fundamentally, C++11 braced lists are formatted exactly like function calls would be formatted in their place. If the braced list follows a name (e.g. a type or variable name), clang-format formats as if the {} were the parentheses of a function call with that name. If there is no name, a zero-length name is assumed.
Cpp11BracedListStyle: true

# Defines in which cases to put empty line before access modifiers.
EmptyLineBeforeAccessModifier: Always

# If true, clang-format detects whether function calls and definitions are formatted with one parameter per line.
# Each call can be bin-packed, one-per-line or inconclusive. If it is inconclusive, e.g. completely on one line, but a decision needs to be made, clang-format analyzes whether there are other bin-packed cases in the input file and act accordingly.
# NOTE: This is an experimental flag, that might go away or be renamed. Do not use this in config files, etc. Use at your own risk.
ExperimentalAutoDetectBinPacking: true

# Don't put // thenamespace after the closing namespace }
FixNamespaceComments: false

IncludeBlocks: Regroup

# Sort includes into these categories
IncludeCategories:
    # Standard library headers
    - Regex: '<algorithm>|<any>|<array>|<atomic>|<barrier>|<bit>|<bitset>|<cassert>|<cctype>|<cerrno>|<cfenv>|<cfloat>|<charconv>|<chrono>|<cinttypes>|<climits>|<clocale>|<cmath>|<codecvt>|<compare>|<complex>|<concepts>|<condition_variable>|<coroutine>|<csetjmp>|<csignal>|<cstdarg>|<cstddef>|<cstdint>|<cstdio>|<cstdlib>|<cstring>|<ctime>|<cuchar>|<cwchar>|<cwctype>|<debugging>|<deque>|<exception>|<execution>|<expected>|<filesystem>|<flat_map>|<flat_set>|<format>|<forward_list>|<fstream>|<functional>|<future>|<generator>|<hazard_pointer>|<initializer_list>|<iomanip>|<ios>|<iosfwd>|<iostream>|<istream>|<iterator>|<latch>|<limits>|<linalg>|<list>|<locale>|<map>|<mdspan>|<memory>|<memory_resource>|<mutex>|<new>|<numbers>|<numeric>|<optional>|<ostream>|<print>|<queue>|<random>|<ranges>|<ratio>|<rcu>|<regex>|<scoped_allocator>|<semaphore>|<set>|<shared_mutex>|<source_location>|<span>|<spanstream>|<sstream>|<stack>|<stacktrace>|<stdexcept>|<stdfloat>|<stop_token>|<streambuf>|<string>|<string_view>|<strstream>|<syncstream>|<system_error>|<text_encoding>|<thread>|<tuple>|<type_traits>|<typeindex>|<typeinfo>|<unordered_map>|<unordered_set>|<utility>|<valarray>|<variant>|<vector>|<version>'
      Priority: 6
    # Qt headers
    - Regex: '<Q'
      Priority: 5
      CaseSensitive: true
    # External headers
    - Regex: '(<|")(grpc\/|grpc\+\+\/|grpcpp\/|gason|google\/|gtest\/|gmock\/|leveldb\/|csv\/)'
      Priority: 4
    # EGYM headers
    - Regex: '(<|")(utils\/|rfid\/|egym\/logging\/|egym\/device_config\/)'
      Priority: 3
    # Test headers
    - Regex: '(<|")(tests\/)'
      Priority: 2
    # Everything else
    - Regex: '.*'
      Priority: 1

# Indent case labels one level from the switch statement.
# When false, use the same indentation level as for the switch statement.
# Switch statement body is always indented one level more than case labels (except the first block following the case label, which itself indents the code - unless IndentCaseBlocks is enabled).
IndentCaseLabels: false

# The number of columns to use for indentation.
IndentWidth: 4

# Indent if a function definition or declaration is wrapped after the type.
#IndentWrappedFunctionNames: true

# If true, empty lines at the start of blocks are kept.
KeepEmptyLinesAtTheStartOfBlocks: false

# The maximum number of consecutive empty lines to keep.
MaxEmptyLinesToKeep: 1

# The indentation used for namespaces.
NamespaceIndentation: None

# The penalty for breaking a function call after “call(”.
PenaltyBreakBeforeFirstCallParameter: 19000

# The penalty for each line break introduced inside a comment.
PenaltyBreakComment: 300

# The penalty for breaking before the first <<.
PenaltyBreakFirstLessLess: 12000

# The penalty for each line break introduced inside a string literal.
PenaltyBreakString: 1000

# The penalty for each character outside of the column limit.
PenaltyExcessCharacter: 1000000

# Penalty for putting the return type of a function onto its own line.
PenaltyReturnTypeOnItsOwnLine: 60

# Pointer alignment style.
PointerAlignment: Left

# Reference alignment style
ReferenceAlignment: Pointer

# Sort includes alphabetically, ignoring case
SortIncludes: CaseInsensitive

# If false, spaces will be removed before assignment operators.
SpaceBeforeAssignmentOperators: true

# If false, spaces will be removed before case colon.
SpaceBeforeCaseColon: false

# If true, a space will be inserted before a C++11 braced list used to initialize an object (after the preceding identifier or type).
SpaceBeforeCpp11BracedList: false

# If false, spaces will be removed before constructor initializer colon.
SpaceBeforeCtorInitializerColon: true

# If false, spaces will be removed before inheritance colon.
SpaceBeforeInheritanceColon: true

# Defines in which cases to put a space before opening parentheses.
SpaceBeforeParens: ControlStatements

# If false, spaces will be removed before range-based for loop colon.
SpaceBeforeRangeBasedForLoopColon: true

# If true, spaces will be before [. Lambdas will not be affected. Only the first [ will get a space added.
SpaceBeforeSquareBrackets: false

# The number of spaces before trailing line comments (// - comments).
# This does not affect trailing block comments (/**/ - comments) as those commonly have different usage patterns and a number of special cases.
SpacesBeforeTrailingComments: 1

# The SpacesInAnglesStyle to use for template argument lists.
SpacesInAngles: Never

# If true, spaces may be inserted into C style casts.
SpacesInCStyleCastParentheses: false

# If true, spaces are inserted inside container literals (e.g. ObjC and Javascript array and dict literals).
SpacesInContainerLiterals: false

# If true, spaces may be inserted into ‘()’.
SpaceInEmptyParentheses: false

# If true, spaces will be inserted after ‘(‘ and before ‘)’.
SpacesInParentheses: false

# If true, spaces will be inserted after ‘[‘ and before ‘]’.
SpacesInSquareBrackets: false

# Format compatible with this standard, e.g. use A<A<int> > instead of A<A<int>> for LS_Cpp03.
Standard: c++17

# The number of columns used for tab stops.
TabWidth: 4

# The way to use tab characters in the resulting file.
UseTab: Never
